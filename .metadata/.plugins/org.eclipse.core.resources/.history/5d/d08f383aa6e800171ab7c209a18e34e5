// ============================================================================
//
// This source code has been automatically generated by  TIBCO Jaspersoft ETL Community
//   JobDesigner (CodeGenerator version 6.0.1.20150908_1633)
//
// ============================================================================
package testetl.testjob_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaFlex_1
//import java.util.List;
import org.apache.log4j.Logger;

//the import part of tJava_1
//import java.util.List;
import org.apache.log4j.Logger;

//the import part of tJava_2
//import java.util.List;
import org.apache.log4j.Logger;

@SuppressWarnings("unused")
/**
 * Job: TestJob Purpose: loadDataFromEmpDB<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.0.1.20150908_1633
 * @status 
 */
public class TestJob implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TestJob";
	private final String projectName = "TESTETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils(
			"_2Bz2cOMTEee267ZCD_TKvA", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TestJob.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TestJob.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputRaw_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void connectionStatsLogs_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendMeter_METTER_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendMeter_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendMeter_FILE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendMeter_DB_error(exception, errorComponent, globalMap);

	}

	public void talendMeter_DB_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendMeter_METTER_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection(
							"after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int age;

		public int getAge() {
			return this.age;
		}

		public String firstName;

		public String getFirstName() {
			return this.firstName;
		}

		public String lastName;

		public String getLastName() {
			return this.lastName;
		}

		public java.util.Date DateTime;

		public java.util.Date getDateTime() {
			return this.DateTime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.id = this.id;
			other.age = this.age;
			other.firstName = this.firstName;
			other.lastName = this.lastName;
			other.DateTime = this.DateTime;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTETL_TestJob.length) {
					if (length < 1024
							&& commonByteArray_TESTETL_TestJob.length == 0) {
						commonByteArray_TESTETL_TestJob = new byte[1024];
					} else {
						commonByteArray_TESTETL_TestJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTETL_TestJob, 0, length);
				strReturn = new String(commonByteArray_TESTETL_TestJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.age = dis.readInt();

					this.firstName = readString(dis);

					this.lastName = readString(dis);

					this.DateTime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.age);

				// String

				writeString(this.firstName, dos);

				// String

				writeString(this.lastName, dos);

				// java.util.Date

				writeDate(this.DateTime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",age=" + String.valueOf(age));
			sb.append(",firstName=" + firstName);
			sb.append(",lastName=" + lastName);
			sb.append(",DateTime=" + String.valueOf(DateTime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int age;

		public int getAge() {
			return this.age;
		}

		public String firstName;

		public String getFirstName() {
			return this.firstName;
		}

		public String lastName;

		public String getLastName() {
			return this.lastName;
		}

		public java.util.Date DateTime;

		public java.util.Date getDateTime() {
			return this.DateTime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.id = this.id;
			other.age = this.age;
			other.firstName = this.firstName;
			other.lastName = this.lastName;
			other.DateTime = this.DateTime;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTETL_TestJob.length) {
					if (length < 1024
							&& commonByteArray_TESTETL_TestJob.length == 0) {
						commonByteArray_TESTETL_TestJob = new byte[1024];
					} else {
						commonByteArray_TESTETL_TestJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTETL_TestJob, 0, length);
				strReturn = new String(commonByteArray_TESTETL_TestJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.age = dis.readInt();

					this.firstName = readString(dis);

					this.lastName = readString(dis);

					this.DateTime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.age);

				// String

				writeString(this.firstName, dos);

				// String

				writeString(this.lastName, dos);

				// java.util.Date

				writeDate(this.DateTime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",age=" + String.valueOf(age));
			sb.append(",firstName=" + firstName);
			sb.append(",lastName=" + lastName);
			sb.append(",DateTime=" + String.valueOf(DateTime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int age;

		public int getAge() {
			return this.age;
		}

		public String firstName;

		public String getFirstName() {
			return this.firstName;
		}

		public String lastName;

		public String getLastName() {
			return this.lastName;
		}

		public java.util.Date DateTime;

		public java.util.Date getDateTime() {
			return this.DateTime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id = this.id;
			other.age = this.age;
			other.firstName = this.firstName;
			other.lastName = this.lastName;
			other.DateTime = this.DateTime;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTETL_TestJob.length) {
					if (length < 1024
							&& commonByteArray_TESTETL_TestJob.length == 0) {
						commonByteArray_TESTETL_TestJob = new byte[1024];
					} else {
						commonByteArray_TESTETL_TestJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTETL_TestJob, 0, length);
				strReturn = new String(commonByteArray_TESTETL_TestJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.age = dis.readInt();

					this.firstName = readString(dis);

					this.lastName = readString(dis);

					this.DateTime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.age);

				// String

				writeString(this.firstName, dos);

				// String

				writeString(this.lastName, dos);

				// java.util.Date

				writeDate(this.DateTime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",age=" + String.valueOf(age));
			sb.append(",firstName=" + firstName);
			sb.append(",lastName=" + lastName);
			sb.append(",DateTime=" + String.valueOf(DateTime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row9Struct row9 = new row9Struct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJava_1 = 0;

				final Logger logger = Logger.getLogger(TestJob.class);
				logger.info("This is info");
				logger.debug("This is debug");

				String foo = "bar";
				logger.error("This is error");
				// logger.warn("This is warn");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				currentComponent = "tJavaFlex_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaFlex_1 = 0;

				// start part of your Java code
				// final Logger logger = Logger.getLogger(TestJob.class);
				logger.info("This is info Start Code");
				logger.debug("This is debugStart Code");

				logger.error("This is error Start Code");
				// logger.warn("This is warn Start Code");

				/**
				 * [tJavaFlex_1 begin ] stop
				 */

				/**
				 * [tMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_3", false);
				start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMysqlOutput_3 = 0;

				int updateKeyCount_tMysqlOutput_3 = 1;
				if (updateKeyCount_tMysqlOutput_3 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_3 = 0;
				int nb_line_update_tMysqlOutput_3 = 0;
				int nb_line_inserted_tMysqlOutput_3 = 0;
				int nb_line_deleted_tMysqlOutput_3 = 0;
				int nb_line_rejected_tMysqlOutput_3 = 0;

				int deletedCount_tMysqlOutput_3 = 0;
				int updatedCount_tMysqlOutput_3 = 0;
				int insertedCount_tMysqlOutput_3 = 0;

				int rejectedCount_tMysqlOutput_3 = 0;

				String tableName_tMysqlOutput_3 = "employescopy";
				boolean whetherReject_tMysqlOutput_3 = false;

				java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime()
						.getTime();
				calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3
						.getTime().getTime();
				long date_tMysqlOutput_3;

				java.sql.Connection conn_tMysqlOutput_3 = null;
				String dbProperties_tMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_3 = null;
				if (dbProperties_tMysqlOutput_3 == null
						|| dbProperties_tMysqlOutput_3.trim().length() == 0) {
					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "empCopy" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "empCopy" + "?"
							+ properties_tMysqlOutput_3;
				}
				String driverClass_tMysqlOutput_3 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_3 = "root";

				final String decryptedPassword_tMysqlOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("f7a0dd7927ecffa9");

				String dbPwd_tMysqlOutput_3 = decryptedPassword_tMysqlOutput_3;
				java.lang.Class.forName(driverClass_tMysqlOutput_3);

				conn_tMysqlOutput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_3, dbUser_tMysqlOutput_3,
						dbPwd_tMysqlOutput_3);

				resourceMap.put("conn_tMysqlOutput_3", conn_tMysqlOutput_3);
				conn_tMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tMysqlOutput_3 = 10000;
				int commitCounter_tMysqlOutput_3 = 0;

				int count_tMysqlOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement("SELECT COUNT(1) FROM `"
								+ "employescopy" + "` WHERE `id` = ?");
				String insert_tMysqlOutput_3 = "INSERT INTO `"
						+ "employescopy"
						+ "` (`id`,`age`,`firstName`,`lastName`,`DateTime`) VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement(insert_tMysqlOutput_3);
				String update_tMysqlOutput_3 = "UPDATE `"
						+ "employescopy"
						+ "` SET `age` = ?,`firstName` = ?,`lastName` = ?,`DateTime` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement(update_tMysqlOutput_3);

				/**
				 * [tMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_1);
				String dbUser_tMysqlInput_1 = "root";

				final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("f7a0dd7927ecffa9");

				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "emp" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();
				((com.mysql.jdbc.Statement) stmt_tMysqlInput_1)
						.enableStreamingResults();

				String dbquery_tMysqlInput_1 = "SELECT \n  `employees`.`id`, \n  `employees`.`age`, \n  `employees`.`firstName`, \n  `employees`.`lastName`,\n`employees`.`DateOfEmp`\nFROM `employees`";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);

				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row1.id = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(1) != null) {
								row1.id = rs_tMysqlInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 2) {
							row1.age = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(2) != null) {
								row1.age = rs_tMysqlInput_1.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 3) {
							row1.firstName = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(3);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.firstName = tmpContent_tMysqlInput_1
										.trim();
							} else {
								row1.firstName = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 4) {
							row1.lastName = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(4);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.lastName = tmpContent_tMysqlInput_1.trim();
							} else {
								row1.lastName = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 5) {
							row1.DateTime = null;
						} else {

							if (rs_tMysqlInput_1.getString(5) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.DateTime = rs_tMysqlInput_1
											.getTimestamp(5);
								} else {
									row1.DateTime = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.DateTime = null;
							}
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMysqlOutput_3 main ] start
						 */

						currentComponent = "tMysqlOutput_3";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						row9 = null;
						whetherReject_tMysqlOutput_3 = false;
						pstmt_tMysqlOutput_3.setInt(1, row1.id);

						java.sql.ResultSet rs_tMysqlOutput_3 = pstmt_tMysqlOutput_3
								.executeQuery();
						int checkCount_tMysqlOutput_3 = -1;
						while (rs_tMysqlOutput_3.next()) {
							checkCount_tMysqlOutput_3 = rs_tMysqlOutput_3
									.getInt(1);
						}
						if (checkCount_tMysqlOutput_3 > 0) {
							pstmtUpdate_tMysqlOutput_3.setInt(1, row1.age);

							if (row1.firstName == null) {
								pstmtUpdate_tMysqlOutput_3.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tMysqlOutput_3.setString(2,
										row1.firstName);
							}

							if (row1.lastName == null) {
								pstmtUpdate_tMysqlOutput_3.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tMysqlOutput_3.setString(3,
										row1.lastName);
							}

							if (row1.DateTime != null) {
								date_tMysqlOutput_3 = row1.DateTime.getTime();
								if (date_tMysqlOutput_3 < year1_tMysqlOutput_3
										|| date_tMysqlOutput_3 >= year10000_tMysqlOutput_3) {
									pstmtUpdate_tMysqlOutput_3.setString(4,
											"0000-00-00 00:00:00");
								} else {
									pstmtUpdate_tMysqlOutput_3.setTimestamp(4,
											new java.sql.Timestamp(
													date_tMysqlOutput_3));
								}
							} else {
								pstmtUpdate_tMysqlOutput_3.setNull(4,
										java.sql.Types.DATE);
							}

							pstmtUpdate_tMysqlOutput_3.setInt(
									5 + count_tMysqlOutput_3, row1.id);

							try {
								updatedCount_tMysqlOutput_3 = updatedCount_tMysqlOutput_3
										+ pstmtUpdate_tMysqlOutput_3
												.executeUpdate();
								nb_line_tMysqlOutput_3++;
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_3 = true;
								nb_line_tMysqlOutput_3++;
								System.err.print(e.getMessage());
							}
						} else {
							pstmtInsert_tMysqlOutput_3.setInt(1, row1.id);

							pstmtInsert_tMysqlOutput_3.setInt(2, row1.age);

							if (row1.firstName == null) {
								pstmtInsert_tMysqlOutput_3.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tMysqlOutput_3.setString(3,
										row1.firstName);
							}

							if (row1.lastName == null) {
								pstmtInsert_tMysqlOutput_3.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tMysqlOutput_3.setString(4,
										row1.lastName);
							}

							if (row1.DateTime != null) {
								date_tMysqlOutput_3 = row1.DateTime.getTime();
								if (date_tMysqlOutput_3 < year1_tMysqlOutput_3
										|| date_tMysqlOutput_3 >= year10000_tMysqlOutput_3) {
									pstmtInsert_tMysqlOutput_3.setString(5,
											"0000-00-00 00:00:00");
								} else {
									pstmtInsert_tMysqlOutput_3.setTimestamp(5,
											new java.sql.Timestamp(
													date_tMysqlOutput_3));
								}
							} else {
								pstmtInsert_tMysqlOutput_3.setNull(5,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tMysqlOutput_3 = insertedCount_tMysqlOutput_3
										+ pstmtInsert_tMysqlOutput_3
												.executeUpdate();
								nb_line_tMysqlOutput_3++;
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_3 = true;
								nb_line_tMysqlOutput_3++;
								System.err.print(e.getMessage());
							}
						}
						if (!whetherReject_tMysqlOutput_3) {
							row9 = new row9Struct();
							row9.id = row1.id;
							row9.age = row1.age;
							row9.firstName = row1.firstName;
							row9.lastName = row1.lastName;
							row9.DateTime = row1.DateTime;
						}
						commitCounter_tMysqlOutput_3++;

						if (commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

							conn_tMysqlOutput_3.commit();
							commitCounter_tMysqlOutput_3 = 0;

						}

						tos_count_tMysqlOutput_3++;

						/**
						 * [tMysqlOutput_3 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tJavaFlex_1 main ] start
							 */

							currentComponent = "tJavaFlex_1";

							// row9
							// row9

							if (execStat) {
								runStat.updateStatOnConnection("row9"
										+ iterateId, 1, 1);
							}

							row11.id = row9.id;
							row11.age = row9.age;
							row11.firstName = row9.firstName;
							row11.lastName = row9.lastName;
							row11.DateTime = row9.DateTime;

							// here is the main part of the component,
							// a piece of code executed in the row
							// loop
							logger.info("This is info Main Code");
							logger.debug("This is debug Main Code");

							logger.error("This is error Main code");
							// logger.warn("This is warn Main code");

							tos_count_tJavaFlex_1++;

							/**
							 * [tJavaFlex_1 main ] stop
							 */

							/**
							 * [tJava_1 main ] start
							 */

							currentComponent = "tJava_1";

							// row11
							// row11

							if (execStat) {
								runStat.updateStatOnConnection("row11"
										+ iterateId, 1, 1);
							}

							tos_count_tJava_1++;

							/**
							 * [tJava_1 main ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();
					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {

						conn_tMysqlInput_1.close();

					}

				}

				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_3 end ] start
				 */

				currentComponent = "tMysqlOutput_3";

				if (pstmtUpdate_tMysqlOutput_3 != null) {

					pstmtUpdate_tMysqlOutput_3.close();

				}
				if (pstmtInsert_tMysqlOutput_3 != null) {

					pstmtInsert_tMysqlOutput_3.close();

				}
				if (pstmt_tMysqlOutput_3 != null) {

					pstmt_tMysqlOutput_3.close();

				}

				if (commitCounter_tMysqlOutput_3 > 0) {

					conn_tMysqlOutput_3.commit();

				}

				conn_tMysqlOutput_3.close();

				resourceMap.put("finish_tMysqlOutput_3", true);

				nb_line_deleted_tMysqlOutput_3 = nb_line_deleted_tMysqlOutput_3
						+ deletedCount_tMysqlOutput_3;
				nb_line_update_tMysqlOutput_3 = nb_line_update_tMysqlOutput_3
						+ updatedCount_tMysqlOutput_3;
				nb_line_inserted_tMysqlOutput_3 = nb_line_inserted_tMysqlOutput_3
						+ insertedCount_tMysqlOutput_3;
				nb_line_rejected_tMysqlOutput_3 = nb_line_rejected_tMysqlOutput_3
						+ rejectedCount_tMysqlOutput_3;

				globalMap.put("tMysqlOutput_3_NB_LINE", nb_line_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMysqlOutput_3", true);
				end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_3 end ] stop
				 */

				/**
				 * [tJavaFlex_1 end ] start
				 */

				currentComponent = "tJavaFlex_1";

				// end of the component, outside/closing the loop
				logger.info("This is info End Code");
				logger.debug("This is debug End Code");

				// String foo = "bar";
				logger.error("This is error End code");
				// logger.warn("This is warn End code");

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				/**
				 * [tJavaFlex_1 end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_3 finally ] start
				 */

				currentComponent = "tMysqlOutput_3";

				if (resourceMap.get("finish_tMysqlOutput_3") == null) {
					if (resourceMap.get("conn_tMysqlOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_3) {
							String errorMessage_tMysqlOutput_3 = "failed to close the connection in tMysqlOutput_3 :"
									+ sqlEx_tMysqlOutput_3.getMessage();

							System.err.println(errorMessage_tMysqlOutput_3);
						}
					}
				}

				/**
				 * [tMysqlOutput_3 finally ] stop
				 */

				/**
				 * [tJavaFlex_1 finally ] start
				 */

				currentComponent = "tJavaFlex_1";

				/**
				 * [tJavaFlex_1 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int age;

		public int getAge() {
			return this.age;
		}

		public String firstName;

		public String getFirstName() {
			return this.firstName;
		}

		public String lastName;

		public String getLastName() {
			return this.lastName;
		}

		public Integer salary;

		public Integer getSalary() {
			return this.salary;
		}

		public java.util.Date DateTime;

		public java.util.Date getDateTime() {
			return this.DateTime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id = this.id;
			other.age = this.age;
			other.firstName = this.firstName;
			other.lastName = this.lastName;
			other.salary = this.salary;
			other.DateTime = this.DateTime;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTETL_TestJob.length) {
					if (length < 1024
							&& commonByteArray_TESTETL_TestJob.length == 0) {
						commonByteArray_TESTETL_TestJob = new byte[1024];
					} else {
						commonByteArray_TESTETL_TestJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTETL_TestJob, 0, length);
				strReturn = new String(commonByteArray_TESTETL_TestJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.age = dis.readInt();

					this.firstName = readString(dis);

					this.lastName = readString(dis);

					this.salary = readInteger(dis);

					this.DateTime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.age);

				// String

				writeString(this.firstName, dos);

				// String

				writeString(this.lastName, dos);

				// Integer

				writeInteger(this.salary, dos);

				// java.util.Date

				writeDate(this.DateTime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",age=" + String.valueOf(age));
			sb.append(",firstName=" + firstName);
			sb.append(",lastName=" + lastName);
			sb.append(",salary=" + String.valueOf(salary));
			sb.append(",DateTime=" + String.valueOf(DateTime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int age;

		public int getAge() {
			return this.age;
		}

		public String firstName;

		public String getFirstName() {
			return this.firstName;
		}

		public String lastName;

		public String getLastName() {
			return this.lastName;
		}

		public java.util.Date DateOfEmp;

		public java.util.Date getDateOfEmp() {
			return this.DateOfEmp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id = this.id;
			other.age = this.age;
			other.firstName = this.firstName;
			other.lastName = this.lastName;
			other.DateOfEmp = this.DateOfEmp;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTETL_TestJob.length) {
					if (length < 1024
							&& commonByteArray_TESTETL_TestJob.length == 0) {
						commonByteArray_TESTETL_TestJob = new byte[1024];
					} else {
						commonByteArray_TESTETL_TestJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTETL_TestJob, 0, length);
				strReturn = new String(commonByteArray_TESTETL_TestJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.age = dis.readInt();

					this.firstName = readString(dis);

					this.lastName = readString(dis);

					this.DateOfEmp = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.age);

				// String

				writeString(this.firstName, dos);

				// String

				writeString(this.lastName, dos);

				// java.util.Date

				writeDate(this.DateOfEmp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",age=" + String.valueOf(age));
			sb.append(",firstName=" + firstName);
			sb.append(",lastName=" + lastName);
			sb.append(",DateOfEmp=" + String.valueOf(DateOfEmp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tMysqlInput_4 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_2 begin ] start
				 */

				ok_Hash.put("tMysqlInput_2", false);
				start_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				currentComponent = "tMysqlInput_2";

				int tos_count_tMysqlInput_2 = 0;

				java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
						.getTime();
				int nb_line_tMysqlInput_2 = 0;
				java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_2);
				String dbUser_tMysqlInput_2 = "root";

				final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f7a0dd7927ecffa9");

				String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;

				String url_tMysqlInput_2 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "emp" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_2, dbUser_tMysqlInput_2,
						dbPwd_tMysqlInput_2);

				java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
						.createStatement();

				String dbquery_tMysqlInput_2 = "SELECT \n  `employees`.`id`, \n  `employees`.`age`, \n  `employees`.`firstName`, \n  `employees`.`lastName`, \n  `employees`.`DateOfEmp`\nFROM `employees`";

				globalMap.put("tMysqlInput_2_QUERY", dbquery_tMysqlInput_2);

				java.sql.ResultSet rs_tMysqlInput_2 = null;
				try {
					rs_tMysqlInput_2 = stmt_tMysqlInput_2
							.executeQuery(dbquery_tMysqlInput_2);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
							.getMetaData();
					int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2
							.getColumnCount();

					String tmpContent_tMysqlInput_2 = null;

					while (rs_tMysqlInput_2.next()) {
						nb_line_tMysqlInput_2++;

						if (colQtyInRs_tMysqlInput_2 < 1) {
							row3.id = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(1) != null) {
								row3.id = rs_tMysqlInput_2.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 2) {
							row3.age = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(2) != null) {
								row3.age = rs_tMysqlInput_2.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 3) {
							row3.firstName = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(3);
							if (tmpContent_tMysqlInput_2 != null) {
								row3.firstName = tmpContent_tMysqlInput_2;
							} else {
								row3.firstName = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 4) {
							row3.lastName = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(4);
							if (tmpContent_tMysqlInput_2 != null) {
								row3.lastName = tmpContent_tMysqlInput_2;
							} else {
								row3.lastName = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 5) {
							row3.DateOfEmp = null;
						} else {

							if (rs_tMysqlInput_2.getString(5) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2
										.getString(5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_2)) {
									row3.DateOfEmp = rs_tMysqlInput_2
											.getTimestamp(5);
								} else {
									row3.DateOfEmp = (java.util.Date) year0_tMysqlInput_2
											.clone();
								}
							} else {
								row3.DateOfEmp = null;
							}
						}

						/**
						 * [tMysqlInput_2 begin ] stop
						 */

						/**
						 * [tMysqlInput_2 main ] start
						 */

						currentComponent = "tMysqlInput_2";

						tos_count_tMysqlInput_2++;

						/**
						 * [tMysqlInput_2 main ] stop
						 */

						/**
						 * [tFlowToIterate_1 main ] start
						 */

						currentComponent = "tFlowToIterate_1";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						globalMap.put("row3.id", row3.id);
						nb_line_tFlowToIterate_1++;

						globalMap.put("row3.age", row3.age);
						nb_line_tFlowToIterate_1++;

						globalMap.put("row3.firstName", row3.firstName);
						nb_line_tFlowToIterate_1++;

						globalMap.put("row3.lastName", row3.lastName);
						nb_line_tFlowToIterate_1++;

						globalMap.put("row3.DateOfEmp", row3.DateOfEmp);
						nb_line_tFlowToIterate_1++;

						counter_tFlowToIterate_1++;
						globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
								counter_tFlowToIterate_1);

						tos_count_tFlowToIterate_1++;

						/**
						 * [tFlowToIterate_1 main ] stop
						 */
						NB_ITERATE_tMysqlInput_4++;

						if (execStat) {
							runStat.updateStatOnConnection("row4", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("iterate1", 1,
									"exec" + NB_ITERATE_tMysqlInput_4);
							// Thread.sleep(1000);
						}

						/**
						 * [tLogRow_1 begin ] start
						 */

						ok_Hash.put("tLogRow_1", false);
						start_Hash.put("tLogRow_1", System.currentTimeMillis());

						currentComponent = "tLogRow_1";

						if (execStat) {
							if (resourceMap.get("inIterateVComp") == null) {

								runStat.updateStatOnConnection("row4"
										+ iterateId, 0, 0);

							}
						}

						int tos_count_tLogRow_1 = 0;

						// /////////////////////

						class Util_tLogRow_1 {

							String[] des_top = { ".", ".", "-", "+" };

							String[] des_head = { "|=", "=|", "-", "+" };

							String[] des_bottom = { "'", "'", "-", "+" };

							String name = "";

							java.util.List<String[]> list = new java.util.ArrayList<String[]>();

							int[] colLengths = new int[6];

							public void addRow(String[] row) {

								for (int i = 0; i < 6; i++) {
									if (row[i] != null) {
										colLengths[i] = Math.max(colLengths[i],
												row[i].length());
									}
								}
								list.add(row);
							}

							public void setTableName(String name) {

								this.name = name;
							}

							public StringBuilder format() {

								StringBuilder sb = new StringBuilder();

								sb.append(print(des_top));

								int totals = 0;
								for (int i = 0; i < colLengths.length; i++) {
									totals = totals + colLengths[i];
								}

								// name
								sb.append("|");
								int k = 0;
								for (k = 0; k < (totals + 5 - name.length()) / 2; k++) {
									sb.append(' ');
								}
								sb.append(name);
								for (int i = 0; i < totals + 5 - name.length()
										- k; i++) {
									sb.append(' ');
								}
								sb.append("|\n");

								// head and rows
								sb.append(print(des_head));
								for (int i = 0; i < list.size(); i++) {

									String[] row = list.get(i);

									java.util.Formatter formatter = new java.util.Formatter(
											new StringBuilder());

									StringBuilder sbformat = new StringBuilder();
									sbformat.append("|%1$-");
									sbformat.append(colLengths[0]);
									sbformat.append("s");

									sbformat.append("|%2$-");
									sbformat.append(colLengths[1]);
									sbformat.append("s");

									sbformat.append("|%3$-");
									sbformat.append(colLengths[2]);
									sbformat.append("s");

									sbformat.append("|%4$-");
									sbformat.append(colLengths[3]);
									sbformat.append("s");

									sbformat.append("|%5$-");
									sbformat.append(colLengths[4]);
									sbformat.append("s");

									sbformat.append("|%6$-");
									sbformat.append(colLengths[5]);
									sbformat.append("s");

									sbformat.append("|\n");

									formatter.format(sbformat.toString(),
											(Object[]) row);

									sb.append(formatter.toString());
									if (i == 0)
										sb.append(print(des_head)); // print the
																	// head
								}

								// end
								sb.append(print(des_bottom));
								return sb;
							}

							private StringBuilder print(String[] fillChars) {
								StringBuilder sb = new StringBuilder();
								// first column
								sb.append(fillChars[0]);
								for (int i = 0; i < colLengths[0]
										- fillChars[0].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[3]);

								for (int i = 0; i < colLengths[1]
										- fillChars[3].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[3]);
								for (int i = 0; i < colLengths[2]
										- fillChars[3].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[3]);
								for (int i = 0; i < colLengths[3]
										- fillChars[3].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[3]);
								for (int i = 0; i < colLengths[4]
										- fillChars[3].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[3]);

								// last column
								for (int i = 0; i < colLengths[5]
										- fillChars[1].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[1]);
								sb.append("\n");
								return sb;
							}

							public boolean isTableEmpty() {
								if (list.size() > 1)
									return false;
								return true;
							}
						}
						Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
						util_tLogRow_1.setTableName("tLogRow_1");
						util_tLogRow_1
								.addRow(new String[] { "id", "age",
										"firstName", "lastName", "salary",
										"DateTime", });
						StringBuilder strBuffer_tLogRow_1 = null;
						int nb_line_tLogRow_1 = 0;
						// /////////////////////

						/**
						 * [tLogRow_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_4 begin ] start
						 */

						ok_Hash.put("tMysqlInput_4", false);
						start_Hash.put("tMysqlInput_4",
								System.currentTimeMillis());

						currentComponent = "tMysqlInput_4";

						int tos_count_tMysqlInput_4 = 0;

						java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar
								.getInstance();
						calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
						java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4
								.getTime();
						int nb_line_tMysqlInput_4 = 0;
						java.sql.Connection conn_tMysqlInput_4 = null;
						String driverClass_tMysqlInput_4 = "org.gjt.mm.mysql.Driver";
						java.lang.Class.forName(driverClass_tMysqlInput_4);
						String dbUser_tMysqlInput_4 = "root";

						final String decryptedPassword_tMysqlInput_4 = routines.system.PasswordEncryptUtil
								.decryptPassword("f7a0dd7927ecffa9");

						String dbPwd_tMysqlInput_4 = decryptedPassword_tMysqlInput_4;

						String url_tMysqlInput_4 = "jdbc:mysql://"
								+ "localhost" + ":" + "3306" + "/" + "empCopy"
								+ "?" + "noDatetimeStringSync=true";

						conn_tMysqlInput_4 = java.sql.DriverManager
								.getConnection(url_tMysqlInput_4,
										dbUser_tMysqlInput_4,
										dbPwd_tMysqlInput_4);

						java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4
								.createStatement();

						String dbquery_tMysqlInput_4 = "SELECT \n  `employeescopy`.`id`, \n  `employeescopy`.`age`, \n  `employeescopy`.`firstName`, \n  `employeescopy`.`lastName`, \n  `employeescopy`.`salary`, \n  `employeescopy`.`DateTime`\nFROM `employeescopy`";

						globalMap.put("tMysqlInput_4_QUERY",
								dbquery_tMysqlInput_4);

						java.sql.ResultSet rs_tMysqlInput_4 = null;
						try {
							rs_tMysqlInput_4 = stmt_tMysqlInput_4
									.executeQuery(dbquery_tMysqlInput_4);
							java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4
									.getMetaData();
							int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4
									.getColumnCount();

							String tmpContent_tMysqlInput_4 = null;

							while (rs_tMysqlInput_4.next()) {
								nb_line_tMysqlInput_4++;

								if (colQtyInRs_tMysqlInput_4 < 1) {
									row4.id = 0;
								} else {

									if (rs_tMysqlInput_4.getObject(1) != null) {
										row4.id = rs_tMysqlInput_4.getInt(1);
									} else {
										throw new RuntimeException(
												"Null value in non-Nullable column");
									}
								}
								if (colQtyInRs_tMysqlInput_4 < 2) {
									row4.age = 0;
								} else {

									if (rs_tMysqlInput_4.getObject(2) != null) {
										row4.age = rs_tMysqlInput_4.getInt(2);
									} else {
										throw new RuntimeException(
												"Null value in non-Nullable column");
									}
								}
								if (colQtyInRs_tMysqlInput_4 < 3) {
									row4.firstName = null;
								} else {

									tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
											.getString(3);
									if (tmpContent_tMysqlInput_4 != null) {
										row4.firstName = tmpContent_tMysqlInput_4;
									} else {
										row4.firstName = null;
									}
								}
								if (colQtyInRs_tMysqlInput_4 < 4) {
									row4.lastName = null;
								} else {

									tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
											.getString(4);
									if (tmpContent_tMysqlInput_4 != null) {
										row4.lastName = tmpContent_tMysqlInput_4;
									} else {
										row4.lastName = null;
									}
								}
								if (colQtyInRs_tMysqlInput_4 < 5) {
									row4.salary = null;
								} else {

									if (rs_tMysqlInput_4.getObject(5) != null) {
										row4.salary = rs_tMysqlInput_4
												.getInt(5);
									} else {
										row4.salary = null;
									}
								}
								if (colQtyInRs_tMysqlInput_4 < 6) {
									row4.DateTime = null;
								} else {

									if (rs_tMysqlInput_4.getString(6) != null) {
										String dateString_tMysqlInput_4 = rs_tMysqlInput_4
												.getString(6);
										if (!("0000-00-00")
												.equals(dateString_tMysqlInput_4)
												&& !("0000-00-00 00:00:00")
														.equals(dateString_tMysqlInput_4)) {
											row4.DateTime = rs_tMysqlInput_4
													.getTimestamp(6);
										} else {
											row4.DateTime = (java.util.Date) year0_tMysqlInput_4
													.clone();
										}
									} else {
										row4.DateTime = null;
									}
								}

								/**
								 * [tMysqlInput_4 begin ] stop
								 */

								/**
								 * [tMysqlInput_4 main ] start
								 */

								currentComponent = "tMysqlInput_4";

								tos_count_tMysqlInput_4++;

								/**
								 * [tMysqlInput_4 main ] stop
								 */

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								// row4
								// row4

								if (execStat) {
									runStat.updateStatOnConnection("row4"
											+ iterateId, 1, 1);
								}

								// /////////////////////

								String[] row_tLogRow_1 = new String[6];

								row_tLogRow_1[0] = String.valueOf(row4.id);

								row_tLogRow_1[1] = String.valueOf(row4.age);

								if (row4.firstName != null) { //
									row_tLogRow_1[2] = String
											.valueOf(row4.firstName);

								} //

								if (row4.lastName != null) { //
									row_tLogRow_1[3] = String
											.valueOf(row4.lastName);

								} //

								if (row4.salary != null) { //
									row_tLogRow_1[4] = String
											.valueOf(row4.salary);

								} //

								if (row4.DateTime != null) { //
									row_tLogRow_1[5] = FormatterUtils
											.format_Date(row4.DateTime,
													"dd-MM-yyyy");

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
								// ////

								// ////

								// /////////////////////

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tMysqlInput_4 end ] start
								 */

								currentComponent = "tMysqlInput_4";

							}
						} finally {
							if (rs_tMysqlInput_4 != null) {
								rs_tMysqlInput_4.close();
							}
							stmt_tMysqlInput_4.close();
							if (conn_tMysqlInput_4 != null
									&& !conn_tMysqlInput_4.isClosed()) {

								conn_tMysqlInput_4.close();

							}

						}

						globalMap.put("tMysqlInput_4_NB_LINE",
								nb_line_tMysqlInput_4);

						ok_Hash.put("tMysqlInput_4", true);
						end_Hash.put("tMysqlInput_4",
								System.currentTimeMillis());

						/**
						 * [tMysqlInput_4 end ] stop
						 */

						/**
						 * [tLogRow_1 end ] start
						 */

						currentComponent = "tLogRow_1";

						// ////

						java.io.PrintStream consoleOut_tLogRow_1 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_1);
						}

						consoleOut_tLogRow_1.println(util_tLogRow_1.format()
								.toString());
						consoleOut_tLogRow_1.flush();
						// ////
						globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

						// /////////////////////

						if (execStat) {
							if (resourceMap.get("inIterateVComp") == null
									|| !((Boolean) resourceMap
											.get("inIterateVComp"))) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 2, 0);
							}
						}

						ok_Hash.put("tLogRow_1", true);
						end_Hash.put("tLogRow_1", System.currentTimeMillis());

						/**
						 * [tLogRow_1 end ] stop
						 */

						if (execStat) {
							runStat.updateStatOnConnection("iterate1", 2,
									"exec" + NB_ITERATE_tMysqlInput_4);
						}

						/**
						 * [tMysqlInput_2 end ] start
						 */

						currentComponent = "tMysqlInput_2";

					}
				} finally {
					if (rs_tMysqlInput_2 != null) {
						rs_tMysqlInput_2.close();
					}
					stmt_tMysqlInput_2.close();
					if (conn_tMysqlInput_2 != null
							&& !conn_tMysqlInput_2.isClosed()) {

						conn_tMysqlInput_2.close();

					}

				}

				globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

				ok_Hash.put("tMysqlInput_2", true);
				end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				/**
				 * [tMysqlInput_2 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_2 finally ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tMysqlInput_4 finally ] start
				 */

				currentComponent = "tMysqlInput_4";

				/**
				 * [tMysqlInput_4 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int salary;

		public int getSalary() {
			return this.salary;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id = this.id;
			other.salary = this.salary;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.id = this.id;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.salary = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.salary);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",salary=" + String.valueOf(salary));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int salary;

		public int getSalary() {
			return this.salary;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.salary = this.salary;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.id = this.id;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.salary = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.salary);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",salary=" + String.valueOf(salary));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];

		public Integer minId;

		public Integer getMinId() {
			return this.minId;
		}

		public Integer maxId;

		public Integer getMaxId() {
			return this.maxId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.minId = readInteger(dis);

					this.maxId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.minId, dos);

				// Integer

				writeInteger(this.maxId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("minId=" + String.valueOf(minId));
			sb.append(",maxId=" + String.valueOf(maxId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];

		public Integer minId;

		public Integer getMinId() {
			return this.minId;
		}

		public Integer maxId;

		public Integer getMaxId() {
			return this.maxId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.minId = readInteger(dis);

					this.maxId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.minId, dos);

				// Integer

				writeInteger(this.maxId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("minId=" + String.valueOf(minId));
			sb.append(",maxId=" + String.valueOf(maxId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row5Struct row10 = row5;
				row2Struct row2 = new row2Struct();
				row2Struct row6 = row2;

				/**
				 * [tFlowToIterate_2 begin ] start
				 */

				int NB_ITERATE_tMysqlInput_3 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_2", false);
				start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFlowToIterate_2 = 0;

				int nb_line_tFlowToIterate_2 = 0;
				int counter_tFlowToIterate_2 = 0;

				/**
				 * [tFlowToIterate_2 begin ] stop
				 */

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tJava_2 = 0;

				final Logger logger = Logger.getLogger(TestJob.class);
				logger.info("This is info");
				logger.debug("This is debug");

				String foo = "bar";
				logger.error("This is error");
				logger.warn("This is warn");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tMysqlInput_5 begin ] start
				 */

				ok_Hash.put("tMysqlInput_5", false);
				start_Hash.put("tMysqlInput_5", System.currentTimeMillis());

				currentComponent = "tMysqlInput_5";

				int tos_count_tMysqlInput_5 = 0;

				java.util.Calendar calendar_tMysqlInput_5 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_5 = calendar_tMysqlInput_5
						.getTime();
				int nb_line_tMysqlInput_5 = 0;
				java.sql.Connection conn_tMysqlInput_5 = null;
				String driverClass_tMysqlInput_5 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_5);
				String dbUser_tMysqlInput_5 = "root";

				final String decryptedPassword_tMysqlInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("f7a0dd7927ecffa9");

				String dbPwd_tMysqlInput_5 = decryptedPassword_tMysqlInput_5;

				String url_tMysqlInput_5 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "emp" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_5 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_5, dbUser_tMysqlInput_5,
						dbPwd_tMysqlInput_5);

				java.sql.Statement stmt_tMysqlInput_5 = conn_tMysqlInput_5
						.createStatement();

				String dbquery_tMysqlInput_5 = "SELECT min(id) as minId,max(id) as maxId FROM employees WHERE DATE(DateOfEmp) = DATE(NOW())";

				globalMap.put("tMysqlInput_5_QUERY", dbquery_tMysqlInput_5);

				java.sql.ResultSet rs_tMysqlInput_5 = null;
				try {
					rs_tMysqlInput_5 = stmt_tMysqlInput_5
							.executeQuery(dbquery_tMysqlInput_5);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_5 = rs_tMysqlInput_5
							.getMetaData();
					int colQtyInRs_tMysqlInput_5 = rsmd_tMysqlInput_5
							.getColumnCount();

					String tmpContent_tMysqlInput_5 = null;

					while (rs_tMysqlInput_5.next()) {
						nb_line_tMysqlInput_5++;

						if (colQtyInRs_tMysqlInput_5 < 1) {
							row5.minId = null;
						} else {

							if (rs_tMysqlInput_5.getObject(1) != null) {
								row5.minId = rs_tMysqlInput_5.getInt(1);
							} else {
								row5.minId = null;
							}
						}
						if (colQtyInRs_tMysqlInput_5 < 2) {
							row5.maxId = null;
						} else {

							if (rs_tMysqlInput_5.getObject(2) != null) {
								row5.maxId = rs_tMysqlInput_5.getInt(2);
							} else {
								row5.maxId = null;
							}
						}

						/**
						 * [tMysqlInput_5 begin ] stop
						 */

						/**
						 * [tMysqlInput_5 main ] start
						 */

						currentComponent = "tMysqlInput_5";

						tos_count_tMysqlInput_5++;

						/**
						 * [tMysqlInput_5 main ] stop
						 */

						/**
						 * [tJava_2 main ] start
						 */

						currentComponent = "tJava_2";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row10 = row5;

						tos_count_tJava_2++;

						/**
						 * [tJava_2 main ] stop
						 */

						/**
						 * [tFlowToIterate_2 main ] start
						 */

						currentComponent = "tFlowToIterate_2";

						// row10
						// row10

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId,
									1, 1);
						}

						globalMap.put("row10.minId", row10.minId);
						nb_line_tFlowToIterate_2++;

						globalMap.put("row10.maxId", row10.maxId);
						nb_line_tFlowToIterate_2++;

						counter_tFlowToIterate_2++;
						globalMap.put("tFlowToIterate_2_CURRENT_ITERATION",
								counter_tFlowToIterate_2);

						tos_count_tFlowToIterate_2++;

						/**
						 * [tFlowToIterate_2 main ] stop
						 */
						NB_ITERATE_tMysqlInput_3++;

						if (execStat) {
							runStat.updateStatOnConnection("row2", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("row6", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("iterate2", 1,
									"exec" + NB_ITERATE_tMysqlInput_3);
							// Thread.sleep(1000);
						}

						/**
						 * [tMysqlOutput_1 begin ] start
						 */

						ok_Hash.put("tMysqlOutput_1", false);
						start_Hash.put("tMysqlOutput_1",
								System.currentTimeMillis());

						currentComponent = "tMysqlOutput_1";

						if (execStat) {
							if (resourceMap.get("inIterateVComp") == null) {

								runStat.updateStatOnConnection("row6"
										+ iterateId, 0, 0);

							}
						}

						int tos_count_tMysqlOutput_1 = 0;

						int updateKeyCount_tMysqlOutput_1 = 1;
						if (updateKeyCount_tMysqlOutput_1 < 1) {
							throw new RuntimeException(
									"For update, Schema must have a key");
						}

						int nb_line_tMysqlOutput_1 = 0;
						int nb_line_update_tMysqlOutput_1 = 0;
						int nb_line_inserted_tMysqlOutput_1 = 0;
						int nb_line_deleted_tMysqlOutput_1 = 0;
						int nb_line_rejected_tMysqlOutput_1 = 0;

						int deletedCount_tMysqlOutput_1 = 0;
						int updatedCount_tMysqlOutput_1 = 0;
						int insertedCount_tMysqlOutput_1 = 0;

						int rejectedCount_tMysqlOutput_1 = 0;

						String tableName_tMysqlOutput_1 = "employeescopy";
						boolean whetherReject_tMysqlOutput_1 = false;

						java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
								.getInstance();
						calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
						long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1
								.getTime().getTime();
						calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
						long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
								.getTime().getTime();
						long date_tMysqlOutput_1;

						java.sql.Connection conn_tMysqlOutput_1 = null;
						String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
						String url_tMysqlOutput_1 = null;
						if (dbProperties_tMysqlOutput_1 == null
								|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
							url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost"
									+ ":" + "3306" + "/" + "empCopy" + "?"
									+ "rewriteBatchedStatements=true";
						} else {
							String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
							if (!properties_tMysqlOutput_1
									.contains("rewriteBatchedStatements")) {
								properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
							}

							url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost"
									+ ":" + "3306" + "/" + "empCopy" + "?"
									+ properties_tMysqlOutput_1;
						}
						String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";

						String dbUser_tMysqlOutput_1 = "root";

						final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil
								.decryptPassword("f7a0dd7927ecffa9");

						String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
						java.lang.Class.forName(driverClass_tMysqlOutput_1);

						conn_tMysqlOutput_1 = java.sql.DriverManager
								.getConnection(url_tMysqlOutput_1,
										dbUser_tMysqlOutput_1,
										dbPwd_tMysqlOutput_1);

						resourceMap.put("conn_tMysqlOutput_1",
								conn_tMysqlOutput_1);
						conn_tMysqlOutput_1.setAutoCommit(false);
						int commitEvery_tMysqlOutput_1 = 10000;
						int commitCounter_tMysqlOutput_1 = 0;
						int batchSize_tMysqlOutput_1 = 10000;
						int batchSizeCounter_tMysqlOutput_1 = 0;

						int count_tMysqlOutput_1 = 0;

						String update_tMysqlOutput_1 = "UPDATE `"
								+ "employeescopy"
								+ "` SET `salary` = ? WHERE `id` = ?";

						java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
								.prepareStatement(update_tMysqlOutput_1);

						/**
						 * [tMysqlOutput_1 begin ] stop
						 */

						/**
						 * [tLogRow_2 begin ] start
						 */

						ok_Hash.put("tLogRow_2", false);
						start_Hash.put("tLogRow_2", System.currentTimeMillis());

						currentComponent = "tLogRow_2";

						if (execStat) {
							if (resourceMap.get("inIterateVComp") == null) {

								runStat.updateStatOnConnection("row2"
										+ iterateId, 0, 0);

							}
						}

						int tos_count_tLogRow_2 = 0;

						// /////////////////////

						class Util_tLogRow_2 {

							String[] des_top = { ".", ".", "-", "+" };

							String[] des_head = { "|=", "=|", "-", "+" };

							String[] des_bottom = { "'", "'", "-", "+" };

							String name = "";

							java.util.List<String[]> list = new java.util.ArrayList<String[]>();

							int[] colLengths = new int[2];

							public void addRow(String[] row) {

								for (int i = 0; i < 2; i++) {
									if (row[i] != null) {
										colLengths[i] = Math.max(colLengths[i],
												row[i].length());
									}
								}
								list.add(row);
							}

							public void setTableName(String name) {

								this.name = name;
							}

							public StringBuilder format() {

								StringBuilder sb = new StringBuilder();

								sb.append(print(des_top));

								int totals = 0;
								for (int i = 0; i < colLengths.length; i++) {
									totals = totals + colLengths[i];
								}

								// name
								sb.append("|");
								int k = 0;
								for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
									sb.append(' ');
								}
								sb.append(name);
								for (int i = 0; i < totals + 1 - name.length()
										- k; i++) {
									sb.append(' ');
								}
								sb.append("|\n");

								// head and rows
								sb.append(print(des_head));
								for (int i = 0; i < list.size(); i++) {

									String[] row = list.get(i);

									java.util.Formatter formatter = new java.util.Formatter(
											new StringBuilder());

									StringBuilder sbformat = new StringBuilder();
									sbformat.append("|%1$-");
									sbformat.append(colLengths[0]);
									sbformat.append("s");

									sbformat.append("|%2$-");
									sbformat.append(colLengths[1]);
									sbformat.append("s");

									sbformat.append("|\n");

									formatter.format(sbformat.toString(),
											(Object[]) row);

									sb.append(formatter.toString());
									if (i == 0)
										sb.append(print(des_head)); // print the
																	// head
								}

								// end
								sb.append(print(des_bottom));
								return sb;
							}

							private StringBuilder print(String[] fillChars) {
								StringBuilder sb = new StringBuilder();
								// first column
								sb.append(fillChars[0]);
								for (int i = 0; i < colLengths[0]
										- fillChars[0].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[3]);

								// last column
								for (int i = 0; i < colLengths[1]
										- fillChars[1].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[1]);
								sb.append("\n");
								return sb;
							}

							public boolean isTableEmpty() {
								if (list.size() > 1)
									return false;
								return true;
							}
						}
						Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
						util_tLogRow_2.setTableName("tLogRow_2");
						util_tLogRow_2.addRow(new String[] { "id", "salary", });
						StringBuilder strBuffer_tLogRow_2 = null;
						int nb_line_tLogRow_2 = 0;
						// /////////////////////

						/**
						 * [tLogRow_2 begin ] stop
						 */

						/**
						 * [tMysqlInput_3 begin ] start
						 */

						ok_Hash.put("tMysqlInput_3", false);
						start_Hash.put("tMysqlInput_3",
								System.currentTimeMillis());

						currentComponent = "tMysqlInput_3";

						int tos_count_tMysqlInput_3 = 0;

						java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
								.getInstance();
						calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
						java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
								.getTime();
						int nb_line_tMysqlInput_3 = 0;
						java.sql.Connection conn_tMysqlInput_3 = null;
						String driverClass_tMysqlInput_3 = "org.gjt.mm.mysql.Driver";
						java.lang.Class.forName(driverClass_tMysqlInput_3);
						String dbUser_tMysqlInput_3 = "root";

						final String decryptedPassword_tMysqlInput_3 = routines.system.PasswordEncryptUtil
								.decryptPassword("f7a0dd7927ecffa9");

						String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;

						String url_tMysqlInput_3 = "jdbc:mysql://"
								+ "localhost" + ":" + "3306" + "/" + "emp"
								+ "?" + "noDatetimeStringSync=true";

						conn_tMysqlInput_3 = java.sql.DriverManager
								.getConnection(url_tMysqlInput_3,
										dbUser_tMysqlInput_3,
										dbPwd_tMysqlInput_3);

						java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
								.createStatement();

						String dbquery_tMysqlInput_3 = "SELECT \n  `salary`.`id`, \n  `salary`.`salary`\nFROM `salary`\nwhere  `salary`.`id` between '"
								+ ((Integer) globalMap.get("row10.minId"))
								+ "' and '"
								+ ((Integer) globalMap.get("row10.maxId"))
								+ "'";

						globalMap.put("tMysqlInput_3_QUERY",
								dbquery_tMysqlInput_3);

						java.sql.ResultSet rs_tMysqlInput_3 = null;
						try {
							rs_tMysqlInput_3 = stmt_tMysqlInput_3
									.executeQuery(dbquery_tMysqlInput_3);
							java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
									.getMetaData();
							int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3
									.getColumnCount();

							String tmpContent_tMysqlInput_3 = null;

							while (rs_tMysqlInput_3.next()) {
								nb_line_tMysqlInput_3++;

								if (colQtyInRs_tMysqlInput_3 < 1) {
									row2.id = 0;
								} else {

									if (rs_tMysqlInput_3.getObject(1) != null) {
										row2.id = rs_tMysqlInput_3.getInt(1);
									} else {
										throw new RuntimeException(
												"Null value in non-Nullable column");
									}
								}
								if (colQtyInRs_tMysqlInput_3 < 2) {
									row2.salary = 0;
								} else {

									if (rs_tMysqlInput_3.getObject(2) != null) {
										row2.salary = rs_tMysqlInput_3
												.getInt(2);
									} else {
										throw new RuntimeException(
												"Null value in non-Nullable column");
									}
								}

								/**
								 * [tMysqlInput_3 begin ] stop
								 */

								/**
								 * [tMysqlInput_3 main ] start
								 */

								currentComponent = "tMysqlInput_3";

								tos_count_tMysqlInput_3++;

								/**
								 * [tMysqlInput_3 main ] stop
								 */

								/**
								 * [tLogRow_2 main ] start
								 */

								currentComponent = "tLogRow_2";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2"
											+ iterateId, 1, 1);
								}

								// /////////////////////

								String[] row_tLogRow_2 = new String[2];

								row_tLogRow_2[0] = String.valueOf(row2.id);

								row_tLogRow_2[1] = String.valueOf(row2.salary);

								util_tLogRow_2.addRow(row_tLogRow_2);
								nb_line_tLogRow_2++;
								// ////

								// ////

								// /////////////////////

								row6 = row2;

								tos_count_tLogRow_2++;

								/**
								 * [tLogRow_2 main ] stop
								 */

								/**
								 * [tMysqlOutput_1 main ] start
								 */

								currentComponent = "tMysqlOutput_1";

								// row6
								// row6

								if (execStat) {
									runStat.updateStatOnConnection("row6"
											+ iterateId, 1, 1);
								}

								whetherReject_tMysqlOutput_1 = false;
								pstmt_tMysqlOutput_1.setInt(1, row6.salary);

								pstmt_tMysqlOutput_1.setInt(
										2 + count_tMysqlOutput_1, row6.id);

								pstmt_tMysqlOutput_1.addBatch();
								nb_line_tMysqlOutput_1++;

								batchSizeCounter_tMysqlOutput_1++;
								if (batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
									try {
										int countSum_tMysqlOutput_1 = 0;
										for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
												.executeBatch()) {
											countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
													: countEach_tMysqlOutput_1);
										}
										updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
										batchSizeCounter_tMysqlOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tMysqlOutput_1 = 0;
										for (int countEach_tMysqlOutput_1 : e
												.getUpdateCounts()) {
											countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
													: countEach_tMysqlOutput_1);
										}
										updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
										System.err.println(e.getMessage());
									}

								}
								commitCounter_tMysqlOutput_1++;

								if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

									try {
										int countSum_tMysqlOutput_1 = 0;
										for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
												.executeBatch()) {
											countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
													: countEach_tMysqlOutput_1);
										}
										updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tMysqlOutput_1 = 0;
										for (int countEach_tMysqlOutput_1 : e
												.getUpdateCounts()) {
											countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
													: countEach_tMysqlOutput_1);
										}
										updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
										System.err.println(e.getMessage());

									}
									conn_tMysqlOutput_1.commit();
									commitCounter_tMysqlOutput_1 = 0;

								}

								tos_count_tMysqlOutput_1++;

								/**
								 * [tMysqlOutput_1 main ] stop
								 */

								/**
								 * [tMysqlInput_3 end ] start
								 */

								currentComponent = "tMysqlInput_3";

							}
						} finally {
							if (rs_tMysqlInput_3 != null) {
								rs_tMysqlInput_3.close();
							}
							stmt_tMysqlInput_3.close();
							if (conn_tMysqlInput_3 != null
									&& !conn_tMysqlInput_3.isClosed()) {

								conn_tMysqlInput_3.close();

							}

						}

						globalMap.put("tMysqlInput_3_NB_LINE",
								nb_line_tMysqlInput_3);

						ok_Hash.put("tMysqlInput_3", true);
						end_Hash.put("tMysqlInput_3",
								System.currentTimeMillis());

						/**
						 * [tMysqlInput_3 end ] stop
						 */

						/**
						 * [tLogRow_2 end ] start
						 */

						currentComponent = "tLogRow_2";

						// ////

						java.io.PrintStream consoleOut_tLogRow_2 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_2);
						}

						consoleOut_tLogRow_2.println(util_tLogRow_2.format()
								.toString());
						consoleOut_tLogRow_2.flush();
						// ////
						globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

						// /////////////////////

						if (execStat) {
							if (resourceMap.get("inIterateVComp") == null
									|| !((Boolean) resourceMap
											.get("inIterateVComp"))) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 2, 0);
							}
						}

						ok_Hash.put("tLogRow_2", true);
						end_Hash.put("tLogRow_2", System.currentTimeMillis());

						/**
						 * [tLogRow_2 end ] stop
						 */

						/**
						 * [tMysqlOutput_1 end ] start
						 */

						currentComponent = "tMysqlOutput_1";

						try {
							if (pstmt_tMysqlOutput_1 != null) {
								int countSum_tMysqlOutput_1 = 0;

								for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
										.executeBatch()) {
									countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
											: countEach_tMysqlOutput_1);
								}

								updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

							}
						} catch (java.sql.BatchUpdateException e) {

							int countSum_tMysqlOutput_1 = 0;
							for (int countEach_tMysqlOutput_1 : e
									.getUpdateCounts()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
										: countEach_tMysqlOutput_1);
							}

							updatedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

							System.err.println(e.getMessage());

						}

						if (pstmt_tMysqlOutput_1 != null) {

							pstmt_tMysqlOutput_1.close();

						}

						if (commitCounter_tMysqlOutput_1 > 0) {

							conn_tMysqlOutput_1.commit();

						}

						conn_tMysqlOutput_1.close();

						resourceMap.put("finish_tMysqlOutput_1", true);

						nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
								+ deletedCount_tMysqlOutput_1;
						nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
								+ updatedCount_tMysqlOutput_1;
						nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
								+ insertedCount_tMysqlOutput_1;
						nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
								+ rejectedCount_tMysqlOutput_1;

						globalMap.put("tMysqlOutput_1_NB_LINE",
								nb_line_tMysqlOutput_1);
						globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
								nb_line_update_tMysqlOutput_1);
						globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
								nb_line_inserted_tMysqlOutput_1);
						globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
								nb_line_deleted_tMysqlOutput_1);
						globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
								nb_line_rejected_tMysqlOutput_1);

						if (execStat) {
							if (resourceMap.get("inIterateVComp") == null
									|| !((Boolean) resourceMap
											.get("inIterateVComp"))) {
								runStat.updateStatOnConnection("row6"
										+ iterateId, 2, 0);
							}
						}

						ok_Hash.put("tMysqlOutput_1", true);
						end_Hash.put("tMysqlOutput_1",
								System.currentTimeMillis());

						/**
						 * [tMysqlOutput_1 end ] stop
						 */

						if (execStat) {
							runStat.updateStatOnConnection("iterate2", 2,
									"exec" + NB_ITERATE_tMysqlInput_3);
						}

						/**
						 * [tMysqlInput_5 end ] start
						 */

						currentComponent = "tMysqlInput_5";

					}
				} finally {
					if (rs_tMysqlInput_5 != null) {
						rs_tMysqlInput_5.close();
					}
					stmt_tMysqlInput_5.close();
					if (conn_tMysqlInput_5 != null
							&& !conn_tMysqlInput_5.isClosed()) {

						conn_tMysqlInput_5.close();

					}

				}

				globalMap.put("tMysqlInput_5_NB_LINE", nb_line_tMysqlInput_5);

				ok_Hash.put("tMysqlInput_5", true);
				end_Hash.put("tMysqlInput_5", System.currentTimeMillis());

				/**
				 * [tMysqlInput_5 end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

				/**
				 * [tFlowToIterate_2 end ] start
				 */

				currentComponent = "tFlowToIterate_2";

				globalMap.put("tFlowToIterate_2_NB_LINE",
						nb_line_tFlowToIterate_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFlowToIterate_2", true);
				end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_5 finally ] start
				 */

				currentComponent = "tMysqlInput_5";

				/**
				 * [tMysqlInput_5 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_2 finally ] start
				 */

				currentComponent = "tFlowToIterate_2";

				/**
				 * [tFlowToIterate_2 finally ] stop
				 */

				/**
				 * [tMysqlInput_3 finally ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :"
									+ sqlEx_tMysqlOutput_1.getMessage();

							System.err.println(errorMessage_tMysqlOutput_1);
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int salary;

		public int getSalary() {
			return this.salary;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.id = this.id;
			other.salary = this.salary;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.id = this.id;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.salary = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.salary);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",salary=" + String.valueOf(salary));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int salary;

		public int getSalary() {
			return this.salary;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.id = this.id;
			other.salary = this.salary;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.id = this.id;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.salary = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.salary);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",salary=" + String.valueOf(salary));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row7Struct row8 = row7;

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tMysqlOutput_2 = 0;

				int updateKeyCount_tMysqlOutput_2 = 1;
				if (updateKeyCount_tMysqlOutput_2 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "employeescopy";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null
						|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "empCopy" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "empCopy" + "?"
							+ properties_tMysqlOutput_2;
				}
				String driverClass_tMysqlOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_2 = "root";

				final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f7a0dd7927ecffa9");

				String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;
				java.lang.Class.forName(driverClass_tMysqlOutput_2);

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement("SELECT COUNT(1) FROM `"
								+ "employeescopy" + "` WHERE `id` = ?");
				String insert_tMysqlOutput_2 = "INSERT INTO `"
						+ "employeescopy" + "` (`id`,`salary`) VALUES (?,?)";

				java.sql.PreparedStatement pstmtInsert_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insert_tMysqlOutput_2);
				String update_tMysqlOutput_2 = "UPDATE `" + "employeescopy"
						+ "` SET `salary` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(update_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tFileOutputRaw_1 begin ] start
				 */

				ok_Hash.put("tFileOutputRaw_1", false);
				start_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());

				currentComponent = "tFileOutputRaw_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputRaw_1 = 0;

				String fileName_tFileOutputRaw_1 = "E:/IST-Networks/RJB 2017/ETL Job/JETLXCmmty-20150908_1633-V6.0.1/workspace/out.txt";

				/**
				 * [tFileOutputRaw_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_6 begin ] start
				 */

				ok_Hash.put("tMysqlInput_6", false);
				start_Hash.put("tMysqlInput_6", System.currentTimeMillis());

				currentComponent = "tMysqlInput_6";

				int tos_count_tMysqlInput_6 = 0;

				java.util.Calendar calendar_tMysqlInput_6 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_6 = calendar_tMysqlInput_6
						.getTime();
				int nb_line_tMysqlInput_6 = 0;
				java.sql.Connection conn_tMysqlInput_6 = null;
				String driverClass_tMysqlInput_6 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_6);
				String dbUser_tMysqlInput_6 = "root";

				final String decryptedPassword_tMysqlInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("f7a0dd7927ecffa9");

				String dbPwd_tMysqlInput_6 = decryptedPassword_tMysqlInput_6;

				String url_tMysqlInput_6 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "emp" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_6 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_6, dbUser_tMysqlInput_6,
						dbPwd_tMysqlInput_6);

				java.sql.Statement stmt_tMysqlInput_6 = conn_tMysqlInput_6
						.createStatement();
				((com.mysql.jdbc.Statement) stmt_tMysqlInput_6)
						.enableStreamingResults();

				String dbquery_tMysqlInput_6 = "SELECT \n  `salary`.`id`, \n  `salary`.`salary`\nFROM `salary`\nwhere  `salary`.`id` between '"
						+ ((Integer) globalMap.get("row5.minId"))
						+ "' and '"
						+ ((Integer) globalMap.get("row5.maxId")) + "'";

				globalMap.put("tMysqlInput_6_QUERY", dbquery_tMysqlInput_6);

				java.sql.ResultSet rs_tMysqlInput_6 = null;
				try {
					rs_tMysqlInput_6 = stmt_tMysqlInput_6
							.executeQuery(dbquery_tMysqlInput_6);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_6 = rs_tMysqlInput_6
							.getMetaData();
					int colQtyInRs_tMysqlInput_6 = rsmd_tMysqlInput_6
							.getColumnCount();

					String tmpContent_tMysqlInput_6 = null;

					while (rs_tMysqlInput_6.next()) {
						nb_line_tMysqlInput_6++;

						if (colQtyInRs_tMysqlInput_6 < 1) {
							row7.id = 0;
						} else {

							if (rs_tMysqlInput_6.getObject(1) != null) {
								row7.id = rs_tMysqlInput_6.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_6 < 2) {
							row7.salary = 0;
						} else {

							if (rs_tMysqlInput_6.getObject(2) != null) {
								row7.salary = rs_tMysqlInput_6.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tMysqlInput_6 begin ] stop
						 */

						/**
						 * [tMysqlInput_6 main ] start
						 */

						currentComponent = "tMysqlInput_6";

						tos_count_tMysqlInput_6++;

						/**
						 * [tMysqlInput_6 main ] stop
						 */

						/**
						 * [tFileOutputRaw_1 main ] start
						 */

						currentComponent = "tFileOutputRaw_1";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						try {
							Object content_tFileOutputRaw_1 = row7.id;

							if (content_tFileOutputRaw_1 != null) {
								java.io.File file_tFileOutputRaw_1 = new java.io.File(
										fileName_tFileOutputRaw_1);
								java.io.File parentFile_tFileOutputRaw_1 = file_tFileOutputRaw_1
										.getParentFile();
								if (parentFile_tFileOutputRaw_1 != null
										&& !parentFile_tFileOutputRaw_1
												.exists()) {
									parentFile_tFileOutputRaw_1.mkdirs();
								}
								if (content_tFileOutputRaw_1 instanceof String) {
									org.apache.commons.io.FileUtils
											.writeStringToFile(
													file_tFileOutputRaw_1,
													content_tFileOutputRaw_1
															.toString(),
													"UTF-8");
								} else if (content_tFileOutputRaw_1 instanceof byte[]) {
									org.apache.commons.io.FileUtils
											.writeByteArrayToFile(
													file_tFileOutputRaw_1,
													(byte[]) content_tFileOutputRaw_1);
								} else if (content_tFileOutputRaw_1 instanceof java.io.InputStream) {
									java.io.InputStream fis_tFileOutputRaw_1 = (java.io.InputStream) content_tFileOutputRaw_1;
									java.io.FileOutputStream fos_tFileOutputRaw_1 = new java.io.FileOutputStream(
											file_tFileOutputRaw_1);
									byte[] buffer_tFileOutputRaw_1 = new byte[65536];
									int nb_tFileOutputRaw_1 = 0;
									while (true) {
										nb_tFileOutputRaw_1 = fis_tFileOutputRaw_1
												.read(buffer_tFileOutputRaw_1);
										if (nb_tFileOutputRaw_1 == -1) {
											break;
										}
										fos_tFileOutputRaw_1.write(
												buffer_tFileOutputRaw_1, 0,
												nb_tFileOutputRaw_1);
									}
									fis_tFileOutputRaw_1.close();
									fos_tFileOutputRaw_1.close();
								}
							}
						} catch (java.lang.Exception e_tFileOutputRaw_1) {
							System.err.println(e_tFileOutputRaw_1);
						}

						row8 = row7;

						tos_count_tFileOutputRaw_1++;

						/**
						 * [tFileOutputRaw_1 main ] stop
						 */

						/**
						 * [tMysqlOutput_2 main ] start
						 */

						currentComponent = "tMysqlOutput_2";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						whetherReject_tMysqlOutput_2 = false;
						pstmt_tMysqlOutput_2.setInt(1, row8.id);

						java.sql.ResultSet rs_tMysqlOutput_2 = pstmt_tMysqlOutput_2
								.executeQuery();
						int checkCount_tMysqlOutput_2 = -1;
						while (rs_tMysqlOutput_2.next()) {
							checkCount_tMysqlOutput_2 = rs_tMysqlOutput_2
									.getInt(1);
						}
						if (checkCount_tMysqlOutput_2 > 0) {
							pstmtUpdate_tMysqlOutput_2.setInt(1, row8.salary);

							pstmtUpdate_tMysqlOutput_2.setInt(
									2 + count_tMysqlOutput_2, row8.id);

							try {
								updatedCount_tMysqlOutput_2 = updatedCount_tMysqlOutput_2
										+ pstmtUpdate_tMysqlOutput_2
												.executeUpdate();
								nb_line_tMysqlOutput_2++;
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_2 = true;
								nb_line_tMysqlOutput_2++;
								System.err.print(e.getMessage());
							}
						} else {
							pstmtInsert_tMysqlOutput_2.setInt(1, row8.id);

							pstmtInsert_tMysqlOutput_2.setInt(2, row8.salary);

							try {
								insertedCount_tMysqlOutput_2 = insertedCount_tMysqlOutput_2
										+ pstmtInsert_tMysqlOutput_2
												.executeUpdate();
								nb_line_tMysqlOutput_2++;
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_2 = true;
								nb_line_tMysqlOutput_2++;
								System.err.print(e.getMessage());
							}
						}
						commitCounter_tMysqlOutput_2++;

						if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

							conn_tMysqlOutput_2.commit();
							commitCounter_tMysqlOutput_2 = 0;

						}

						tos_count_tMysqlOutput_2++;

						/**
						 * [tMysqlOutput_2 main ] stop
						 */

						/**
						 * [tMysqlInput_6 end ] start
						 */

						currentComponent = "tMysqlInput_6";

					}
				} finally {
					if (rs_tMysqlInput_6 != null) {
						rs_tMysqlInput_6.close();
					}
					stmt_tMysqlInput_6.close();
					if (conn_tMysqlInput_6 != null
							&& !conn_tMysqlInput_6.isClosed()) {

						conn_tMysqlInput_6.close();

					}

				}

				globalMap.put("tMysqlInput_6_NB_LINE", nb_line_tMysqlInput_6);

				ok_Hash.put("tMysqlInput_6", true);
				end_Hash.put("tMysqlInput_6", System.currentTimeMillis());

				/**
				 * [tMysqlInput_6 end ] stop
				 */

				/**
				 * [tFileOutputRaw_1 end ] start
				 */

				currentComponent = "tFileOutputRaw_1";

				globalMap.put("tFileOutputRaw_1_FILENAME_PATH",
						fileName_tFileOutputRaw_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputRaw_1", true);
				end_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());

				/**
				 * [tFileOutputRaw_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (pstmtUpdate_tMysqlOutput_2 != null) {

					pstmtUpdate_tMysqlOutput_2.close();

				}
				if (pstmtInsert_tMysqlOutput_2 != null) {

					pstmtInsert_tMysqlOutput_2.close();

				}
				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				if (commitCounter_tMysqlOutput_2 > 0) {

					conn_tMysqlOutput_2.commit();

				}

				conn_tMysqlOutput_2.close();

				resourceMap.put("finish_tMysqlOutput_2", true);

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;

				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_6 finally ] start
				 */

				currentComponent = "tMysqlInput_6";

				/**
				 * [tMysqlInput_6 finally ] stop
				 */

				/**
				 * [tFileOutputRaw_1 finally ] start
				 */

				currentComponent = "tFileOutputRaw_1";

				/**
				 * [tFileOutputRaw_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (resourceMap.get("finish_tMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tMysqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
							String errorMessage_tMysqlOutput_2 = "failed to close the connection in tMysqlOutput_2 :"
									+ sqlEx_tMysqlOutput_2.getMessage();

							System.err.println(errorMessage_tMysqlOutput_2);
						}
					}
				}

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				if (conn_connectionStatsLogs_Commit != null
						&& !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String properties_connectionStatsLogs = "noDatetimeStringSync=true";
				if (properties_connectionStatsLogs == null
						|| properties_connectionStatsLogs.trim().length() == 0) {
					properties_connectionStatsLogs += "rewriteBatchedStatements=true";
				} else if (properties_connectionStatsLogs != null
						&& !properties_connectionStatsLogs
								.contains("rewriteBatchedStatements")) {
					properties_connectionStatsLogs += "&rewriteBatchedStatements=true";
				}

				String url_connectionStatsLogs = "jdbc:mysql://" + "localhost"
						+ ":" + "3306" + "/" + "emp" + "?"
						+ properties_connectionStatsLogs;

				String dbUser_connectionStatsLogs = "root";

				final String decryptedPassword_connectionStatsLogs = routines.system.PasswordEncryptUtil
						.decryptPassword("f7a0dd7927ecffa9");
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				String sharedConnectionName_connectionStatsLogs = "StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"org.gjt.mm.mysql.Driver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("conn_connectionStatsLogs",
						conn_connectionStatsLogs);

				globalMap.put("db_connectionStatsLogs", "emp");

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendMeter_FILEStruct implements
			routines.system.IPersistableRow<row_talendMeter_FILEStruct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTETL_TestJob.length) {
					if (length < 1024
							&& commonByteArray_TESTETL_TestJob.length == 0) {
						commonByteArray_TESTETL_TestJob = new byte[1024];
					} else {
						commonByteArray_TESTETL_TestJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTETL_TestJob, 0, length);
				strReturn = new String(commonByteArray_TESTETL_TestJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendMeter_FILEStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_talendMeter_METTERStruct implements
			routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
		final static byte[] commonByteArrayLock_TESTETL_TestJob = new byte[0];
		static byte[] commonByteArray_TESTETL_TestJob = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTETL_TestJob.length) {
					if (length < 1024
							&& commonByteArray_TESTETL_TestJob.length == 0) {
						commonByteArray_TESTETL_TestJob = new byte[1024];
					} else {
						commonByteArray_TESTETL_TestJob = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTETL_TestJob, 0, length);
				strReturn = new String(commonByteArray_TESTETL_TestJob, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTETL_TestJob) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendMeter_METTERStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendMeter_METTERProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();
				row_talendMeter_METTERStruct row_talendMeter_FILE = row_talendMeter_METTER;

				/**
				 * [talendMeter_DB begin ] start
				 */

				ok_Hash.put("talendMeter_DB", false);
				start_Hash.put("talendMeter_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendMeter_DB = 0;

				int nb_line_talendMeter_DB = 0;
				int nb_line_update_talendMeter_DB = 0;
				int nb_line_inserted_talendMeter_DB = 0;
				int nb_line_deleted_talendMeter_DB = 0;
				int nb_line_rejected_talendMeter_DB = 0;

				int deletedCount_talendMeter_DB = 0;
				int updatedCount_talendMeter_DB = 0;
				int insertedCount_talendMeter_DB = 0;

				int rejectedCount_talendMeter_DB = 0;

				String tableName_talendMeter_DB = "";
				boolean whetherReject_talendMeter_DB = false;

				java.util.Calendar calendar_talendMeter_DB = java.util.Calendar
						.getInstance();
				calendar_talendMeter_DB.set(1, 0, 1, 0, 0, 0);
				long year1_talendMeter_DB = calendar_talendMeter_DB.getTime()
						.getTime();
				calendar_talendMeter_DB.set(10000, 0, 1, 0, 0, 0);
				long year10000_talendMeter_DB = calendar_talendMeter_DB
						.getTime().getTime();
				long date_talendMeter_DB;

				java.sql.Connection conn_talendMeter_DB = null;
				conn_talendMeter_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int count_talendMeter_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendMeter_DB = conn_talendMeter_DB
						+ "[checktable]" + "[" + "" + "]";

				if (GlobalResource.resourceMap
						.get(keyCheckTable_talendMeter_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendMeter_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendMeter_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendMeter_DB = conn_talendMeter_DB
									.getMetaData();
							java.sql.ResultSet rsTable_talendMeter_DB = dbMetaData_talendMeter_DB
									.getTables(null, null, null,
											new String[] { "TABLE" });
							boolean whetherExist_talendMeter_DB = false;
							while (rsTable_talendMeter_DB.next()) {
								String table_talendMeter_DB = rsTable_talendMeter_DB
										.getString("TABLE_NAME");
								if (table_talendMeter_DB.equalsIgnoreCase("")) {
									whetherExist_talendMeter_DB = true;
									break;
								}
							}
							rsTable_talendMeter_DB.close();
							if (!whetherExist_talendMeter_DB) {
								java.sql.Statement stmtCreate_talendMeter_DB = conn_talendMeter_DB
										.createStatement();
								stmtCreate_talendMeter_DB
										.execute("CREATE TABLE `"
												+ tableName_talendMeter_DB
												+ "`(`moment` DATETIME ,`pid` VARCHAR(20)  ,`father_pid` VARCHAR(20)  ,`root_pid` VARCHAR(20)  ,`system_pid` BIGINT(8)  ,`project` VARCHAR(50)  ,`job` VARCHAR(255)  ,`job_repository_id` VARCHAR(255)  ,`job_version` VARCHAR(255)  ,`context` VARCHAR(50)  ,`origin` VARCHAR(255)  ,`label` VARCHAR(255)  ,`count` INT(3)  ,`reference` INT(3)  ,`thresholds` VARCHAR(255)  )");
								stmtCreate_talendMeter_DB.close();
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendMeter_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}

				String insert_talendMeter_DB = "INSERT INTO `"
						+ ""
						+ "` (`moment`,`pid`,`father_pid`,`root_pid`,`system_pid`,`project`,`job`,`job_repository_id`,`job_version`,`context`,`origin`,`label`,`count`,`reference`,`thresholds`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendMeter_DB = null;
				// [%connection%][psmt][tableName]
				String keyPsmt_talendMeter_DB = conn_talendMeter_DB + "[psmt]"
						+ "[" + "" + "]";
				pstmt_talendMeter_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendMeter_DB,
								insert_talendMeter_DB, keyPsmt_talendMeter_DB);

				/**
				 * [talendMeter_DB begin ] stop
				 */

				/**
				 * [talendMeter_FILE begin ] start
				 */

				ok_Hash.put("talendMeter_FILE", false);
				start_Hash.put("talendMeter_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_FILE";

				currentComponent = "talendMeter_FILE";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendMeter_FILE = 0;

				String fileName_talendMeter_FILE = "";
				fileName_talendMeter_FILE = (new java.io.File(
						"E:/IST-Networks/RJB 2017/ETL Job" + "/"
								+ "meter_file.txt")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_talendMeter_FILE = null;
				String extension_talendMeter_FILE = null;
				String directory_talendMeter_FILE = null;
				if ((fileName_talendMeter_FILE.indexOf("/") != -1)) {
					if (fileName_talendMeter_FILE.lastIndexOf(".") < fileName_talendMeter_FILE
							.lastIndexOf("/")) {
						fullName_talendMeter_FILE = fileName_talendMeter_FILE;
						extension_talendMeter_FILE = "";
					} else {
						fullName_talendMeter_FILE = fileName_talendMeter_FILE
								.substring(0, fileName_talendMeter_FILE
										.lastIndexOf("."));
						extension_talendMeter_FILE = fileName_talendMeter_FILE
								.substring(fileName_talendMeter_FILE
										.lastIndexOf("."));
					}
					directory_talendMeter_FILE = fileName_talendMeter_FILE
							.substring(0,
									fileName_talendMeter_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendMeter_FILE.lastIndexOf(".") != -1) {
						fullName_talendMeter_FILE = fileName_talendMeter_FILE
								.substring(0, fileName_talendMeter_FILE
										.lastIndexOf("."));
						extension_talendMeter_FILE = fileName_talendMeter_FILE
								.substring(fileName_talendMeter_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendMeter_FILE = fileName_talendMeter_FILE;
						extension_talendMeter_FILE = "";
					}
					directory_talendMeter_FILE = "";
				}
				boolean isFileGenerated_talendMeter_FILE = true;
				java.io.File filetalendMeter_FILE = new java.io.File(
						fileName_talendMeter_FILE);
				globalMap.put("talendMeter_FILE_FILE_NAME",
						fileName_talendMeter_FILE);
				if (filetalendMeter_FILE.exists()) {
					isFileGenerated_talendMeter_FILE = false;
				}
				int nb_line_talendMeter_FILE = 0;
				int splitEvery_talendMeter_FILE = 1000;
				int splitedFileNo_talendMeter_FILE = 0;
				int currentRow_talendMeter_FILE = 0;

				final String OUT_DELIM_talendMeter_FILE = /**
				 * Start field
				 * talendMeter_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendMeter_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendMeter_FILE = /**
				 * Start field
				 * talendMeter_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendMeter_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendMeter_FILE != null
						&& directory_talendMeter_FILE.trim().length() != 0) {
					java.io.File dir_talendMeter_FILE = new java.io.File(
							directory_talendMeter_FILE);
					if (!dir_talendMeter_FILE.exists()) {
						dir_talendMeter_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendMeter_FILE = null;

				outtalendMeter_FILE = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_talendMeter_FILE, true),
								"UTF-8"));

				resourceMap.put("out_talendMeter_FILE", outtalendMeter_FILE);
				resourceMap.put("nb_line_talendMeter_FILE",
						nb_line_talendMeter_FILE);

				/**
				 * [talendMeter_FILE begin ] stop
				 */

				/**
				 * [talendMeter_METTER begin ] start
				 */

				ok_Hash.put("talendMeter_METTER", false);
				start_Hash
						.put("talendMeter_METTER", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				int tos_count_talendMeter_METTER = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER
						.getMessages()) {
					row_talendMeter_METTER.pid = pid;
					row_talendMeter_METTER.root_pid = rootPid;
					row_talendMeter_METTER.father_pid = fatherPid;
					row_talendMeter_METTER.project = projectName;
					row_talendMeter_METTER.job = jobName;
					row_talendMeter_METTER.context = contextStr;
					row_talendMeter_METTER.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row_talendMeter_METTER.moment = mcm.getMoment();
					row_talendMeter_METTER.job_version = mcm.getJobVersion();
					row_talendMeter_METTER.job_repository_id = mcm.getJobId();
					row_talendMeter_METTER.system_pid = mcm.getSystemPid();
					row_talendMeter_METTER.label = mcm.getLabel();
					row_talendMeter_METTER.count = mcm.getCount();
					row_talendMeter_METTER.reference = talendMeter_METTER
							.getConnLinesCount(mcm.getReferense() + "_count");
					row_talendMeter_METTER.thresholds = mcm.getThresholds();

					/**
					 * [talendMeter_METTER begin ] stop
					 */

					/**
					 * [talendMeter_METTER main ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					tos_count_talendMeter_METTER++;

					/**
					 * [talendMeter_METTER main ] stop
					 */

					/**
					 * [talendMeter_FILE main ] start
					 */

					currentVirtualComponent = "talendMeter_FILE";

					currentComponent = "talendMeter_FILE";

					// Main
					// row_talendMeter_METTER

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					StringBuilder sb_talendMeter_FILE = new StringBuilder();
					if (row_talendMeter_METTER.moment != null) {
						sb_talendMeter_FILE.append(FormatterUtils.format_Date(
								row_talendMeter_METTER.moment,
								"yyyy-MM-dd HH:mm:ss"));
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.pid != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.pid);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.father_pid != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.father_pid);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.root_pid != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.root_pid);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.system_pid != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.system_pid);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.project != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.project);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.job != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.job);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.job_repository_id != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.job_repository_id);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.job_version != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.job_version);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.context != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.context);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.origin != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.origin);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.label != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.label);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.count != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.count);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.reference != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.reference);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.thresholds != null) {
						sb_talendMeter_FILE
								.append(row_talendMeter_METTER.thresholds);
					}
					sb_talendMeter_FILE
							.append(OUT_DELIM_ROWSEP_talendMeter_FILE);

					nb_line_talendMeter_FILE++;
					resourceMap.put("nb_line_talendMeter_FILE",
							nb_line_talendMeter_FILE);

					outtalendMeter_FILE.write(sb_talendMeter_FILE.toString());

					row_talendMeter_FILE = row_talendMeter_METTER;

					tos_count_talendMeter_FILE++;

					/**
					 * [talendMeter_FILE main ] stop
					 */

					/**
					 * [talendMeter_DB main ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					// Main
					// row_talendMeter_FILE

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					whetherReject_talendMeter_DB = false;
					if (row_talendMeter_FILE.moment != null) {
						date_talendMeter_DB = row_talendMeter_FILE.moment
								.getTime();
						if (date_talendMeter_DB < year1_talendMeter_DB
								|| date_talendMeter_DB >= year10000_talendMeter_DB) {
							pstmt_talendMeter_DB.setString(1,
									"0000-00-00 00:00:00");
						} else {
							pstmt_talendMeter_DB
									.setTimestamp(1, new java.sql.Timestamp(
											date_talendMeter_DB));
						}
					} else {
						pstmt_talendMeter_DB.setNull(1, java.sql.Types.DATE);
					}

					if (row_talendMeter_FILE.pid == null) {
						pstmt_talendMeter_DB.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(2,
								row_talendMeter_FILE.pid);
					}

					if (row_talendMeter_FILE.father_pid == null) {
						pstmt_talendMeter_DB.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(3,
								row_talendMeter_FILE.father_pid);
					}

					if (row_talendMeter_FILE.root_pid == null) {
						pstmt_talendMeter_DB.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(4,
								row_talendMeter_FILE.root_pid);
					}

					if (row_talendMeter_FILE.system_pid == null) {
						pstmt_talendMeter_DB.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setLong(5,
								row_talendMeter_FILE.system_pid);
					}

					if (row_talendMeter_FILE.project == null) {
						pstmt_talendMeter_DB.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(6,
								row_talendMeter_FILE.project);
					}

					if (row_talendMeter_FILE.job == null) {
						pstmt_talendMeter_DB.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(7,
								row_talendMeter_FILE.job);
					}

					if (row_talendMeter_FILE.job_repository_id == null) {
						pstmt_talendMeter_DB.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(8,
								row_talendMeter_FILE.job_repository_id);
					}

					if (row_talendMeter_FILE.job_version == null) {
						pstmt_talendMeter_DB.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(9,
								row_talendMeter_FILE.job_version);
					}

					if (row_talendMeter_FILE.context == null) {
						pstmt_talendMeter_DB
								.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(10,
								row_talendMeter_FILE.context);
					}

					if (row_talendMeter_FILE.origin == null) {
						pstmt_talendMeter_DB
								.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(11,
								row_talendMeter_FILE.origin);
					}

					if (row_talendMeter_FILE.label == null) {
						pstmt_talendMeter_DB
								.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(12,
								row_talendMeter_FILE.label);
					}

					if (row_talendMeter_FILE.count == null) {
						pstmt_talendMeter_DB
								.setNull(13, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setInt(13,
								row_talendMeter_FILE.count);
					}

					if (row_talendMeter_FILE.reference == null) {
						pstmt_talendMeter_DB
								.setNull(14, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setInt(14,
								row_talendMeter_FILE.reference);
					}

					if (row_talendMeter_FILE.thresholds == null) {
						pstmt_talendMeter_DB
								.setNull(15, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(15,
								row_talendMeter_FILE.thresholds);
					}

					try {
						nb_line_talendMeter_DB++;
						insertedCount_talendMeter_DB = insertedCount_talendMeter_DB
								+ pstmt_talendMeter_DB.executeUpdate();
					} catch (java.lang.Exception e) {
						whetherReject_talendMeter_DB = true;
						System.err.print(e.getMessage());
					}

					tos_count_talendMeter_DB++;

					/**
					 * [talendMeter_DB main ] stop
					 */

					/**
					 * [talendMeter_METTER end ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

				}

				ok_Hash.put("talendMeter_METTER", true);
				end_Hash.put("talendMeter_METTER", System.currentTimeMillis());

				/**
				 * [talendMeter_METTER end ] stop
				 */

				/**
				 * [talendMeter_FILE end ] start
				 */

				currentVirtualComponent = "talendMeter_FILE";

				currentComponent = "talendMeter_FILE";

				if (outtalendMeter_FILE != null) {
					outtalendMeter_FILE.flush();
					outtalendMeter_FILE.close();
				}

				globalMap.put("talendMeter_FILE_NB_LINE",
						nb_line_talendMeter_FILE);
				globalMap.put("talendMeter_FILE_FILE_NAME",
						fileName_talendMeter_FILE);

				resourceMap.put("finish_talendMeter_FILE", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendMeter_FILE", true);
				end_Hash.put("talendMeter_FILE", System.currentTimeMillis());

				/**
				 * [talendMeter_FILE end ] stop
				 */

				/**
				 * [talendMeter_DB end ] start
				 */

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				if (pstmt_talendMeter_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendMeter_DB);

				}

				nb_line_deleted_talendMeter_DB = nb_line_deleted_talendMeter_DB
						+ deletedCount_talendMeter_DB;
				nb_line_update_talendMeter_DB = nb_line_update_talendMeter_DB
						+ updatedCount_talendMeter_DB;
				nb_line_inserted_talendMeter_DB = nb_line_inserted_talendMeter_DB
						+ insertedCount_talendMeter_DB;
				nb_line_rejected_talendMeter_DB = nb_line_rejected_talendMeter_DB
						+ rejectedCount_talendMeter_DB;

				globalMap.put("talendMeter_DB_NB_LINE", nb_line_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_UPDATED",
						nb_line_update_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_DELETED",
						nb_line_deleted_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendMeter_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendMeter_DB", true);
				end_Hash.put("talendMeter_DB", System.currentTimeMillis());

				/**
				 * [talendMeter_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendMeter_METTER:sub_ok_talendMeter_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendMeter_connectionStatsLogs_Commit", 0,
						"ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendMeter_METTER finally ] start
				 */

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				/**
				 * [talendMeter_METTER finally ] stop
				 */

				/**
				 * [talendMeter_FILE finally ] start
				 */

				currentVirtualComponent = "talendMeter_FILE";

				currentComponent = "talendMeter_FILE";

				if (resourceMap.get("finish_talendMeter_FILE") == null) {

					java.io.Writer outtalendMeter_FILE = (java.io.Writer) resourceMap
							.get("out_talendMeter_FILE");
					if (outtalendMeter_FILE != null) {
						outtalendMeter_FILE.flush();
						outtalendMeter_FILE.close();
					}

				}

				/**
				 * [talendMeter_FILE finally ] stop
				 */

				/**
				 * [talendMeter_DB finally ] start
				 */

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				/**
				 * [talendMeter_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TestJob TestJobClass = new TestJob();

		int exitCode = TestJobClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TestJob.class.getClassLoader()
					.getResourceAsStream(
							"testetl/testjob_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_1) {
			globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

			e_tMysqlInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tMysqlInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_2) {
			globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", -1);

			e_tMysqlInput_2.printStackTrace();

		}
		try {
			errorCode = null;
			tMysqlInput_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_5) {
			globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", -1);

			e_tMysqlInput_5.printStackTrace();

		}
		try {
			errorCode = null;
			tMysqlInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_6) {
			globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", -1);

			e_tMysqlInput_6.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : TestJob");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_connectionStatsLogs",
				globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 224115 characters generated by TIBCO Jaspersoft ETL Community on the December
 * 24, 2017 2:59:15 PM AST
 ************************************************************************************************/
